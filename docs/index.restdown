---
title: Services API
apisections: Applications, Services, Service Configuration, Amon Configuration, Endpoints
markdown2extras: wiki-tables, code-friendly
---

# Services API

This API allows operators to configure, deploy, and upgrade software using a
set of loosely-coupled federated services.

SAPI is the next iteration of the manta.git deployment tools.  In short, it's
trying to bring to SDC some of the deployment software already developed for
manta.  It has several goals:

* Provide cleaner, more unified deployment semantics
* Expose an API for an operator portal
* Enable auto-discovery of SDC and manta services
* Enable dynamic configuration of SDC and manta services


# Terminology

There are three main objects: applications, services, and instances.  An
application has one or more services, and a service has one or more instances.
Instances are actual zones which inherit their zone parameters from the
associated applications and services.


## Applications

Applications are groups of related services.  SDC and manta are each represented
as a separate application; additional applications may be supported in the
future.

    {
      "uuid": "14160e92-5533-11e2-86a2-9f78cf99260d",
      "name": "sdc",
      "owner_uuid": "1959d690-5533-11e2-8bee-1b98757172d1",

      "params": {
        "ram": 1024
        "quota": 100
        ...
      },

      "metadata": {
        "nameservers": "10.99.99.20 10.99.99.21",
        "region": "sf"
        ...
      },

      "configs": []
    }


## Services

A service is a single logical set of endpoints implemented by one or more
instances.

Here's a sample service object:

    {
      "uuid": "5081a5d6-6bd0-11e2-bafb-a735b6c6ccb6",
      "name": "mako",
      "application": "14160e92-5533-11e2-86a2-9f78cf99260d",  // "sdc"

      "servers": [ "mantastorage" ],
      "policy": "round-robin"

      "params": {
        "image_uuid": "7e607924-5513-11e2-861a-2314f719391d",
        "networks": [ "admin" ],
        "ram": 2048
        "quota": 500
        ...
      },

      "metadata": {
        "shard": true,
        "nginx_workers": 32
        ...
      },

      "configs": [ "3edcac40-6bd0-11e2-bc62-635be2e7aa93" ]
    }


## Instances

One or more instances implement each service.  Each instance inherits its
properties and configuration from both the service and application.  Instances
may override certain properties or configuration from either its containing
service or application.

Here's a sample instance object:

    {
      "uuid": "b63c3b56-6bd1-11e2-af0a-836066bbb42e",
      "service": "5081a5d6-6bd0-11e2-bafb-a735b6c6ccb6",  // "mako"

      "params": {
        ram: 4096
      },

      "metadata": {
        moray: "1.moray.manta.joyent.us"
      },

      "configs": [ ]
    }



# Configuration

Each zone has an agent inside that zone which is responsible for maintaining
that zone's configuration.  The configuration manifest below specifies the SMF
service to which this configuration applies, the type of configuration file
(either text or JSON), the path into which to write the file, and the file's
template.  The template will be rendered with keys retrieved from the metadata
API.  That rendering uses the hogan.js module, as is used by the manta.git tools
today.

Here's what one of those configuration manifests looks like:

    {
      "service": "minnow",
      "type": "json",
      "path": "/opt/smartdc/minnow/etc/config.json"
      "template": {
        "moray": {
          "bucket": {
            "name": "manta_storage",
            "index": {
              "hostname": { "type": "string" },
              "availableMB": { "type": "number" },
              "percentUsed": { "type": "number" },
              "server_uuid": { "type": "string" },
              "timestamp": { "type": "number" },
              "zone_uuid": { "type": "string" }
            }
          },
          "connectTimeout": 200,
          "retry": {
            "retries": 2,
            "minTimeout": 500
          },
          "host": "1.moray.{{REGION}}.{{DNS_DOMAIN}}",
          "port": 2020
        },
        "datacenter": "{{DATACENTER}}",
        "domain": "{{SERVICE_NAME}}",
        "objectRoot": "/manta",
        "zone_uuid": "{{ZONE_UUID}}",
        "interval": 5000
      }
    }


# Amon Configuration

I haven't started SAPI-10 yet, but the plan there is similar to that for
configuration manifests.


# Endpoints

In addition to these endpoints, there's an SDC client for these endpoints which
is shipped in the node-sdc-clients.git repository.

Note: most of the API documentation below doesn't have the appropriate
parameters or return values yet.  If you find yourself needing that information
now, bug wdp so he finishes this document more quickly.


## CreateApplication (POST /applications)

Initialize an application.


## ListApplications (GET /applications)

Returns the list of applications.


## GetApplication (GET /applications/:uuid)

Returns the list of applications.


## DeleteApplication (DELETE /application/:uuid)

Deletes an application.



## CreateService (POST /services)

Create a service.


## ListServices (GET /services)

Returns the list of all services.


## GetService (GET /services/:uuid)

Return a particular service.


## DeleteService (DELETE /services/:uuid)

Delete a particular service.



## CreateInstance (POST /instances)

Create and deploy an instance.


## ListInstances (GET /instances)

Get all instances.


## GetInstance (GET /instances/:instance_uuid)

Get a particular instance.


## DeleteInstance (DELETE /instances/:instance_uuid)

Delete this instance.



## CreateConfig (POST /configs)

Create a configuration manifest.


## ListConfigs (GET /configs)

Get all configuration manifests.


## GetConfig (GET /configs/:uuid)

Get a particular configuration manifest.


## DeleteConfig (DELETE /configs/:uuid)

Delete this configuration manifest.



## SearchImage (GET /images?name=<search term>)

Queries the updates.joyent.us IMGAPI for images which match the "name" search
parameter.


## DownloadImage (POST /images/:uuid)

Downloads an image from the updates.joyent.us IMGAPI repo and installs it into
the local datacenter.
